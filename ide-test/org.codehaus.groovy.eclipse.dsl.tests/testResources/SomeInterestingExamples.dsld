import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.ast.FieldNode;

// this script shows some more funky things that dsld files can do

// fields is bound to a single FieldNode (if there is one delegate in the target type), 
// or a list of FieldNodes if there are multiple.
currentType(fields : findField(annotatedBy(Delegate))).accept {
	// Hmmm... not entirely happy with this one since 
	// we need to have an if statement.
	// Should pointcuts always return lists?????
	if (fields instanceof Collection) {
		for (field in fields) {
			delegatesTo(field.declaringType)
		} 
	} else if (fields instanceof FieldNode) {
		delegatesTo fields 
	} 
}  

// need to use a bind pointcut here since we want to bind to the outermost pointcut
bind( type : currentType(annotatedBy(Singleton))).accept {
	method name:"instance", type:type, isStatic:true, declaringType:type, doc:"Get the singleton instance of this Class"
}

// this is an example of creating your own pointcut
// Should return non-null if there is a match, or null if there is no match
// 'it' is resolved to whatever the argument is
registerPointcut("myPointcut", {
	if (it instanceof ClassNode && it.isUsingGenerics()) {
		return it.genericsTypes
	} else {
		return null
	}
})

// As always, you can use a named argument to bind the match of a pointcut and have
// it available inside the contribution group
myPointcut(accepted: currentType()).accept {
	property name:"phat", type: accepted
}


fileName("Byayy.groovy").accept {
	
	delegatesToUseNamedArgs(String)	
	
}