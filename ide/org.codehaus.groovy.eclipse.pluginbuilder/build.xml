<!--
    Copyright 2003-2009 the original author or authors.
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
<project name="Build Facade" default="groovy-main">
	<taskdef resource="org/pluginbuilder/anttasks/pluginbuildertasks.properties" classpath="build-files/pluginbuilder-anttasks.jar" />
	
	<property file="build_local.properties" />
	<import file="build-files/build_shared.xml"/>
  
	  <target name="-build.internal">
  		<property name="buildResultsDirectory" value="${buildDirectory}/results" />

  		<java classname="org.eclipse.equinox.launcher.Main" fork="true"
  			failonerror="true" errorproperty="is.build.error">
  			<arg value="-application"/>
  			<arg value="org.eclipse.ant.core.antRunner"/>
  			<arg value="-f"/>
  			<arg value="${eclipseDir}/plugins/org.eclipse.pde.build_3.4.1.R34x_v20081217/scripts/build.xml"/>
  			<arg value="-verbose"/>
  			<jvmarg value="-DbuildHome=${buildHome}"/>
  			<jvmarg value="-Dbuilder=${buildHome}/build-files"/>
  			<jvmarg value="-DbuildDirectory=${buildDirectory}"/>
  			<jvmarg value="-DbuildResultsDirectory=/tmp/groovybuild/results"/>
  			<jvmarg value="-DpluginPath=${eclipse.installation.dir}/eclipse/plugins"/>
  			<jvmarg value="-DbaseLocation=${buildDirectory}"/>
  			<jvmarg value="-DbuildType=N"/>
  			<jvmarg value="-DbuildProperties=${buildHome}/build-files/build.properties"/>
  			<jvmarg value="-DworkspaceDirBase=${workspaceDirBase}"/>
  			<jvmarg value="-DworkspaceDirBaseTest=${workspaceDirBaseTest}"/>
  			<jvmarg value="-DworkspaceDirIde=${workspaceDirIde}"/>
  			<jvmarg value="-DworkspaceDirIdeTest=${workspaceDirIdeTest}"/>
  			<jvmarg value="-DskipFetch=true"/>
  			<jvmarg value="-Dversion.full=${version.full}"/>
  			<jvmarg value="-Dversion.qualifier=${forceContextQualifier}"/>
  			<jvmarg value="-DforceContextQualifier=${forceContextQualifier}"/>
    	
  		 	<classpath>
	    		<fileset dir="${eclipseDir}/plugins">
    	   		<include name="org.eclipse.equinox.launcher_*.jar"/>
    	    </fileset>
    	  </classpath>
			</java>
    
    </target>

  				
  	<target name="-properties" description="Creates required properties">		
		
		<!-- versioning -->
		<property name="build.version" value="HEAD"/>
		<tstamp>
			<format property="tstampQual" pattern="yyyyMMdd-HH00" locale="en,US" timezone="America/Vancouver"/>
		</tstamp>
		
		<property name="buildTypePresentation" value=""/>
		<echo message="tstampQual=${tstampQual}"/>
    <property name="forceContextQualifier" value="${tstampQual}-${buildTypePresentation}"/>
		<echo message="=============================================="/>
		<echo message="forceContextQualifier=${forceContextQualifier}"/>
		<echo message="=============================================="/>

		<property name="version.full" value="${forceContextQualifier}"/>

		        

		<!-- includes -->
		<property file="build_local.properties" />
		<property file="pluginbuilder.config" />
		
		<!-- set defaults -->
		<property name="buildTarget" value="main"/>
		
		<!-- check if clean should be called -->
		<condition property="is.clean">
			<and>
			<not>
				<isset property="do.not.clean"/>
			</not>			
			<or>
				<equals arg1="main" arg2="${buildTarget}" trim="true"/>
		   	<equals arg1="fetch" arg2="${buildTarget}" trim="true"/>
			</or>
			</and>
		</condition>
		<property name="no.rcp.build" value="true"/>
	</target>
		
	<target name="-clean" if="is.clean">
		<echo level="info" message="Cleaning directory ${buildDirectory}"/>
		<delete dir="${buildDirectory}" verbose="false"/>
		<mkdir dir="${buildDirectory}"/>
	</target>
	
	<target name="-build" depends="-properties,-clean">
		<property name="no.rcp.build" value="true"/>
		<antcall target="unpack.eclipse"/>
		<antcall target="-build.internal">
			<param name="buildfile" value="${regularbuildfile}"/>
    </antcall>
	</target>
	
	
	<target name="groovy-main" description="Run the main target of customTargets.xml. Return status 0,1,2 for Success, Build Failure and Test Failure">
		<property name="buildTarget" value="main"/>
		<antcall target="-build"/>
		<antcall target="-check.for.failure"/>
		
		<!-- Only publish if a publish location is set -->
		<condition property="shouldPublish">
			<not>
				<equals arg1="${publishLocation}" arg2=""/>
			</not>
		</condition>
		<antcall target="-publish"/>
	</target>
	
	<target name="-check.for.failure">
		<!-- If the java command itself failed - unlikely -->
  	<fail message="PDE Build failed" if="is.build.error" status="1"/>
			
		<!-- Load the log file and look for "Build Failed" -->
		<loadfile srcFile="${logsLocation}" property="logs.file"/>
		<condition property="is.build.failed" value="true">
			<and>
				<isset property="${logs.file}"/>
				<contains string="${logs.file}" substring="BUILD FAILED"/>
			</and>
		</condition>
		<fail message="Build failed" if="is.build.failed" status="2"/>
		
		<!-- Load the Groovy test logs and check for successful tests -->
		<loadfile srcFile="${eclipse.installation.dir}/eclipse/results/org.codehaus.groovy.alltests.AllGroovyTests.xml" 
							property="is.allGroovyTests.passed"/>
		<condition property="is.allGroovyTests.passed" value="true">
			<contains string="${build.stderr}" substring="testsuite errors=&quot;0&quot; failures=&quot;1&quot;"/>
		</condition>
		<fail message="Tests failed" unless="is.allGroovyTests.passed" status="2"/>

		<loadfile srcFile="${eclipse.installation.dir}/eclipse/results/org.codehaus.groovy.alltests.GroovyJDTTests.xml" 
							property="is.groovyJDTTests.passed"/>
		<condition property="is.groovyJDTTests.passed" value="true">
			<contains string="${build.stderr}" substring="testsuite errors=&quot;0&quot; failures=&quot;1&quot;"/>
		</condition>
		<fail message="Tests failed" unless="is.groovyJDTTests.passed" status="2"/>
	</target>

	<target name="-publish" if="shouldPublish">
		<delete dir="${publishLocation}"/>
		<mkdir dir="${publishLocation}"/>
		<copy todir="${publishLocation}">
			<fileset dir="${buildDirectory}/updateSite"/>
		</copy>
		<copy todir="${publishLocation}">
			<fileset dir="${buildDirectory}">
				<include name="${buildType}-*-${buildTypePresentation}"/>		
			</fileset>
		</copy>
	</target>
	
	<target name="buildProperties" description="Print out derived properties for the current build." depends="-properties">
		<fail message="You have to set the property 'buildPropertiesFile' if calling buildProperties" unless="buildPropertiesFile"/>
		<condition property="subdir" value="nightly" else="releases">
			<equals arg1="${buildType}" arg2="N"/>
		</condition>
		<echo file="${buildPropertiesFile}">relativeServerResultsDir: ${subdir}
version.full: ${version.full}
version.qualifier: ${version.qualifier}</echo>
	</target>
</project>